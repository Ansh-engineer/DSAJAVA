// Leetcode --> 63 --> Unique Paths II

// Approach --> 1st --> Using Dynamic Programming (Tabulation)

// Code Below --> 



class Solution {
    public int uniquePathsWithObstacles(int[][] dp) {
        int m = dp.length;
        int n = dp[0].length;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = 0;
            }
        }

        if (dp[0][0] == 0)
            return 0;

        for (int i = 1; i < m; i++) {
            if (dp[i][0] == 0)
                continue;
            dp[i][0] = dp[i - 1][0];
        }

        for (int j = 1; j < n; j++) {
            if (dp[0][j] == 0)
                continue;
            dp[0][j] = dp[0][j - 1];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (dp[i][j] == 0)
                    continue;
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        return dp[m - 1][n - 1];

    }
}


// Time Complexity --> O(m * n) && Space Complexity --> O(1)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
