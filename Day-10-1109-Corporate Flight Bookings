// Leetcode -- > 1109 --> Corporate Flight Bookings

// Approach --> 1st --> using Brute Force 

// Code Below --> 


class Solution {
    public int[] corpFlightBookings(int[][] arr, int n) {
        int [] ans = new int[n];
         for(int i=0;i<arr.length;i++){
            for(int j= arr[i][0]-1;j<arr[i][1];j++){
              ans[j] += arr[i][2];
            }
         }
         return ans;
    }
}


// Time Complexity --> O(m * k) && Space Complexity --> O(1)


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - 



--------------------------------------------------------------------------------  Approach 2nd is Better than Approach 1st  --------------------------------------------------------------------------------------------



// Approach --> 2nd --> Using Prefix Sum

// Code Below --> 



class Solution {
    public int[] corpFlightBookings(int[][] arr, int n) {
        int [] ans = new int [n];
        for(int i=0;i<arr.length;i++){
            int start = arr[i][0];
            int end = arr[i][1];
            int put = arr[i][2];
            ans[start-1]+= put;
           if(end<n) ans[end] -= put;
        }

        for(int i=1;i<n;i++){
            ans[i]+=ans[i-1];
        }
        return ans;
    }
}


// Time Complexity --> O(m + n) && Space Complexity --> O(1)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
