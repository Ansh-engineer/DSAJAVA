// Leetcode --> 62 --> Unique Paths

// Approach --> 1st --> Using Dynammic Programming (Memoization)

// Code Below -->


class Solution {

    static int [][] dp;

  public int path(int row, int col , int m ,int n){
      if(row>=m || col>=n) return 0;
      if(row==m-1 || col==n-1) return 1;
      if(dp[row][col]!=-1) return dp[row][col];
      int rightways = path(row,col+1,m,n);
      int leftways = path(row+1,col,m,n);
      return dp[row][col] =  rightways + leftways;
  }

    public int uniquePaths(int m, int n) {
        dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
              dp[i][j] = -1;
            }
        }
         return path(0,0,m,n);
    }
}


// Time Complexity --> O(m * n) && Space Complexity --> O(m * n)


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -    -  -    -  -  -  -    -  -  -  -    -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  



// Approach --> 2nd --> Using Dynammic Programming (Tabulation)

// Code Below  --> 


class Solution {
    public int uniquePaths(int m, int n) {
        int [][] dp = new int [m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(i==0 || j==0) dp[i][j] = 1;
               else dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}


// Time Complexity --> O(m * n) && Space Complexity --> O(m * n)



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
