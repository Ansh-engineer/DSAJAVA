// Implementing PriorityQueue (MinHeap) using array (visulaizing of tree with top elements as smallest and child nodes have greater value && it should be complete binary tree)

// Code Below -->


import java.security.spec.ECFieldF2m;

class Minheap{
      int [] arr;
      int size;

      Minheap(int capacity){
        arr=new int[capacity];
        size=0;
      }

      public void add(int value) throws Exception {
        if(size==arr.length) throw new Exception("heap is full");
         arr[size++] =  value;
         upheapify(size-1);
      }

      public void upheapify(int child ){
        if(child==0) return;
        int parent = (child-1)/2;
        if(arr[child]<arr[parent]){
            swap(child,parent);
            upheapify(parent);
        }
        return;
      }

      public int peek() throws Exception{
         if(size==0) throw new Exception("heap is empty");
         return arr[0];
      }

      public int size(){
        return size;
      }

      public void swap(int i , int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
      }
}

public class implementind_min_heap_array  {
    public static void main(String[] args) throws Exception {

        Minheap pq = new Minheap(5);

        pq.add(9);
        pq.add(3);
        pq.add(2);
        pq.add(1);
        System.out.println(pq.size());
        System.out.println(pq.peek());
    }
}



// Time Complexity -->(add && upheapify) --> O(log n) && Time Complexity --> (size && peek) --> O(1) && Space Complexity --> 	O(n)


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
