// Leetcode --> 209 --> Minimum Size Subarray Sum

// Appraoch -- 1st --> Using Brute Force (Time Limit Exceed)

// Code Below -->



class Solution {
    public int minSubArrayLen(int target, int[] arr) {
        int ans =Integer.MAX_VALUE;
        int n = arr.length;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                 sum+=arr[j];
                 if(sum>=target){
                   ans = Math.min(ans,j-i+1);
                   break;
                 }
            }
        }

        if(ans==Integer.MAX_VALUE) return 0;
         return ans;
    }
}

// Time Complexity --> O(n^2) && Space Complexity --> O(1)


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -



-----------------------------------------------------------------------  Apprach 2nd is better than approach 1st  -----------------------------------------------------------------------------------------------------



// Approach --> 2nd --> using sliding window

// Code Below --> 


class Solution {
    public int minSubArrayLen(int target, int[] arr) {
         int n= arr.length;
         int i=0,j=0;
         int mini = Integer.MAX_VALUE;
         int sum=0;
         while(j<n){
            sum+=arr[j];

            while(sum>=target){
                int len = j-i+1;
                mini = Math.min(mini,len);
                sum-=arr[i];
                i++;
            }
            j++;
         }

         if(mini == Integer.MAX_VALUE)  return 0;
         return mini;
    }
}


// Time Complexity --> O(n) && Space Complexity --> O(1)



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
