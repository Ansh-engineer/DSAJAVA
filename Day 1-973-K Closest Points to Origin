Leetcode 973 -  K Closest Points to Origin

Approach - 1 = using hashmap and PriorityQueue 

//  Code Below ->>>>  Almost clear Get stuck in Edge cases-->>

        

class Solution {

 public class Pair{
    int x;
    int y;

    Pair(int x, int y){
        this.x = x;
        this.y = y;
    }
 }
    public int[][] kClosest(int[][] points, int k) {
        
         PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
         int [][] ans = new int [k][2];
         HashMap<Integer,Pair> map = new HashMap<>();
         int n = points.length;
         if(n==k) return points;
         for(int i=0;i<n;i++){
             int x = points[i][0] , y = points[i][1];
             int dis = x*x + y*y;
             pq.add(dis);
             Pair cor = new Pair(x,y);
             map.put(dis,cor);
             if(pq.size()>k) pq.remove();
         }

         for(int i=0;i<k;i++){
            int dist= pq.remove();
            Pair pt = map.get(dist);
             ans[i][0] = pt.x;
             ans[i][1] = pt.y;
         }
         return ans;        
    }
}

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  

// Approach - 2 = using PriorityQueue and OOPS concept using Comprarable for Triplet class


//  Code Below ->>>>  



class Solution {

 public class Triplet implements Comparable<Triplet>{
    int d;
    int x;
    int y;

    Triplet (int d,int x, int y){
        this.d = d;
        this.x = x;
        this.y = y;
    }

   public int compareTo(Triplet t){
        return this.d - t.d;
    }


 }
    public int[][] kClosest(int[][] points, int k) {
        
         PriorityQueue<Triplet> pq = new PriorityQueue<>(Collections.reverseOrder());
         int [][] ans = new int [k][2];
         int n = points.length;
         for(int i=0;i<n;i++){
             int x = points[i][0] , y = points[i][1];
             int d = x*x + y*y;
             pq.add(new Triplet(d,x,y));
             if(pq.size()>k) pq.remove();
         }

         for(int i=0;i<k;i++){
            Triplet t= pq.remove();
             ans[i][0] = t.x;
             ans[i][1] = t.y;
         }
         return ans;


        
    }
}


// Time Complexity: O(n log k) && Space Complexity: O(k)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
