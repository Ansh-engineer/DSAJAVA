Leetcode --> 295 --> Find Median from Data Stream

// Approach - 1 --> using Arraylist and sorting (But led Time Limit Exceed on last case)

Code Below --> 


class MedianFinder {

    ArrayList<Integer> ans;

    public MedianFinder() {
        ans = new ArrayList<>();
    }
    
    public void addNum(int num) {
         ans.add(num);
    }
    
    public double findMedian() {
        int n = ans.size();
        Collections.sort(ans);
        if(n%2!=0) return ans.get(n/2);
         return (ans.get(n/2) + ans.get(n/2 - 1))/2.0;
    }
}


// Time Complexity --> 	O(n^2 log n) && Space Complexity --> O(n)



-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  


-----------------------------------------------------   Appraoch - 2nd is better than Approach -1st   ---------------------------------------------------------------


// Approach - 2 --> using PriorityQueue (MinHeap && MaxHeap)

// Code Below -->


class MedianFinder {

     PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> minheap = new PriorityQueue<>();

    public MedianFinder() {
       
    }
    
    public void addNum(int num) {
         if(maxheap.size()==0) maxheap.add(num);
         else{
            if(num<maxheap.peek()) maxheap.add(num);
            else minheap.add(num);
         }

         if(maxheap.size()>minheap.size()+1){
            int peek = maxheap.remove();
            minheap.add(peek);
         }
         if(minheap.size()>maxheap.size()+1){
            int peek = minheap.remove();
            maxheap.add(peek);
         }
    }
    
    public double findMedian() {
        if(maxheap.size()==minheap.size()) return (maxheap.peek()+ minheap.peek())/2.0;
        else if(maxheap.size()>minheap.size()) return maxheap.peek();
        else return minheap.peek();
    }
}



// Time Complexity --> 	On(logâ€¯n) && Space Complexity --> O(n)



---------------------------------------------------------------------------------------------------------------------------------------------------------------------




