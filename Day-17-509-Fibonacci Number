// Leetcode --> 509 --> Fibonacci Number

// Approach --> 1st --> Using recursion

// Code Below --> 


class Solution {
    public int fib(int n) {
        if(n<=1) return n;
        return fib(n-1) + fib(n-2);
    }
}


// Time Complexity -->  O(2ⁿ)  && Space Complexity --> O(n)


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -



// Approach --> 2nd --> (Dynamic Programming) Using Recursion && memeoizatiton

// Code Below --> 



class Solution {

    static int[] dp;

    public int fibo(int n) {
        if (n <= 1)
            return n;
        if (dp[n] != 0)
            return dp[n];
        int ans = fibo(n - 1) + fibo(n - 2);
        dp[n] = ans;
        return ans;
    }

    public int fib(int n) {
        dp = new int[n + 1];
        return fibo(n);
    }
}


// Time Complexity --> O(n) && Space Complexity --> O(n)


// Approach --> 3rd --> (Dynamic Proagramming) Using an Extra Array --> Tabulation

// Code Below -->


class Solution {
    public int fib(int n) {
         int [] dp = new int [n+1];
         if(n<=1) return n;
         dp[0] = 0;
         dp[1] = 1;
         for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
         }
         return dp[n];
    }
}


// Time Complexity --> O(n) && Space Complexity --> O(n);



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
