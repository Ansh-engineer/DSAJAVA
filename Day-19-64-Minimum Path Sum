// Leetcode --> 64 --> Minimum Path Sum

// Approach --> 1st --> Using Dynamic Programming (Tabulation)

// Code Below --> 


class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(i==0 && j==0){
                   continue;
               }else if(j==0){
                     grid[i][j] += grid[i-1][j];
               }else if(i==0){
                       grid[i][j] += grid[i][j-1];
                }else{
                 grid[i][j]+= Math.min(grid[i-1][j],grid[i][j-1]);
               }
            }
        }

        return grid[m-1][n-1];
    }
}


// Time Complexity --> O(m Ã— n) && Space Complexity --> O(1)




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
