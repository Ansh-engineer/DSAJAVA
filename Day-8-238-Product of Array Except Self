// Leetcode --> 238 --> Product of Array Except Self

// Approach --> 1st --> using Brute Force ( Time Limit Exceed )

// Code Below -->


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int [] ans = new int [n];
        for(int i=0;i<n;i++){
            int product =1;
            for(int j=0;j<n;j++){
                if(j==i) continue;
                else product *= nums[j];
            }
            ans[i] = product;
        }

        return ans;
    }
}


// Time Complexity --> O(nÂ²) && Space Complexity --> O(n)


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -


-----------------------------------------------------------------------------  Approach 2nd is better than Approach 1st  ----------------------------------------------------------------------------------------------



// Approach --> 2 --> Using Prefix and Suffix 

// Code Below -->


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int [] pre = new int[n];
        pre[0] =1;
        int [] suff = new int [n];
        suff[n-1]=1;

        for(int i=1;i<n;i++){
            pre[i] = pre[i-1] * nums[i-1];
        }

        for(int j= n-2;j>=0;j--){
            suff[j] = suff[j+1] * nums[j+1];
         }

         int [] ans = new int [n];

         for(int i=0;i<n;i++){
            ans[i] = pre[i] * suff[i];
         }

         return ans;
    }
}


// Time Complexity --> O(n) && Space Complexity --> O(n)



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
